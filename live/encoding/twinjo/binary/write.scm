;; Copyright 2019 Lassi Kortela
;; SPDX-License-Identifier: ISC

(define (twinjo-binary-write obj port)

  (define (encode-integer x minbytes maxbytes)
    (let ((nbyte (fxmin minbytes (ceiling (/ (integer-length x) 8)))))
      (if (fx<=? nbyte maxbytes)
          (let ((bytes (make-bytevector nbyte)))
            (unless (fxzero? nbyte)
              (bytevector-sint-set! bytes 0 x (endianness big) nbyte))
            bytes)
          (error "Twinjo: cannot write number" x))))

  (define (write-length x)
    (if (fx<? x #x80) (put-u8 port x)
        (let ((bytes (encode-integer x 2 8)))
          (put-u8 port (fxior #x80 (bytevector-length bytes)))
          (put-bytevector port bytes))))

  (define (write-type-byte type byte)
    (put-u8 port type)
    (write-length 1)
    (put-u8 port byte))

  (define (write-type-bytes type bytes)
    (put-u8 port type)
    (write-length (bytevector-length bytes))
    (put-bytevector port bytes))

  (let write-object ((obj obj))
    (define (write-type-objects type for-each)
      (put-u8 port type)
      (put-u8 port #x80)
      (for-each write-object obj)
      (put-u8 port #x00)
      (put-u8 port #x00))
    (cond ((boolean? obj)
           (write-type-byte #x01 (if obj #xFF #x00)))
          ((integer? obj)
           (write-type-bytes #x02 (encode-integer obj 0 8)))
          ((symbol? obj)
           (write-type-bytes #xDD (string->utf8 (symbol->string obj))))
          ((string? obj)
           (write-type-bytes #x0C (string->utf8 obj)))
          ((list? obj)
           (write-type-objects #xE0 for-each))
          ((vector? obj)
           (write-type-objects #x30 vector-for-each))
          ((hashtable? obj)
           (write-type-objects #xE4 hash-table-alternating-for-each))
          (else
           (error "Twinjo: cannot write object" obj)))))
